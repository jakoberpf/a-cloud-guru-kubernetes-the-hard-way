---
- name: Setup worker nodes
  hosts: workers

  vars:
        
    - ansible_ssh_user: "ubuntu"
    - ansible_ssh_common_args: >
          -o ProxyCommand="ssh -W %h:%p -q {{ ansible_ssh_user }}@{{ lookup('env', 'B_HOST') }}" \
          -o ServerAliveInterval=5 \
          -o StrictHostKeyChecking=no
    
  tasks:

    - name: Set hostname
      become: true
      shell: "hostname {{ inventory_hostname }}"

    ## Install the required packages. ## 
    - name: Install socat, conntrack and ipset
      become: true
      apt: 
        name: ['socat', 'conntrack', 'ipset']
        state: present

    ## Download and install the necessary binaries. ##
    - name: Download kubectl, kube-proxy and kubelet
      become: true
      get_url:
        url: "{{ item }}"
        dest: /usr/local/bin/
        mode: 0755
      with_items:
        - https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubectl
        - https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kube-proxy
        - https://storage.googleapis.com/kubernetes-release/release/v1.18.6/bin/linux/amd64/kubelet

    - name: Download runc
      become: true
      get_url:
        url: https://github.com/opencontainers/runc/releases/download/v1.0.0-rc91/runc.amd64
        dest: /usr/local/bin/runc
        mode: 0755

    - name: Download crictl
      get_url:
        url: https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.18.0/crictl-v1.18.0-linux-amd64.tar.gz
        dest: /home/ubuntu/crictl.tar.gz

    - name: Unarchiving crictl
      become: true
      unarchive:
        src: /home/ubuntu/crictl.tar.gz
        dest: /usr/local/bin/
        remote_src: yes

    - name: Download cni-plugins
      get_url:
        url: https://github.com/containernetworking/plugins/releases/download/v0.8.6/cni-plugins-linux-amd64-v0.8.6.tgz
        dest: /home/ubuntu/cni-plugins.tar.gz

    - name: Creates directory
      become: yes
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/cni/net.d
        - /opt/cni/bin

    - name: Unarchiving cni-plugins
      become: yes
      unarchive:
        src: /home/ubuntu/cni-plugins.tar.gz
        dest: /opt/cni/bin
        remote_src: yes

    - name: Download containerd
      get_url:
        url: https://github.com/containerd/containerd/releases/download/v1.3.6/containerd-1.3.6-linux-amd64.tar.gz
        dest: /home/ubuntu/containerd.tar.gz

    - name: Creates directory
      become: yes
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /home/ubuntu/containerd/

    - name: Unarchiving containerd
      become: yes
      unarchive:
        src: /home/ubuntu/containerd.tar.gz
        dest: /home/ubuntu/containerd/
        remote_src: yes

    - name: Move containerd executable into /bin/
      become: yes
      shell: mv /home/ubuntu/containerd/bin/* /bin/

    ## Configure the containerd service. ##
    - name: Creates directory
      become: yes
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/containerd

    - name: Create 
      become: yes
      shell: |
        cat << EOF | sudo tee /etc/containerd/config.toml
        [plugins]
          [plugins.cri.containerd]
            snapshotter = "overlayfs"
            [plugins.cri.containerd.default_runtime]
              runtime_type = "io.containerd.runtime.v1.linux"
              runtime_engine = "/usr/local/bin/runc"
              runtime_root = ""
        EOF

    - name: Create 
      become: yes
      shell: |
        cat << EOF | sudo tee /etc/systemd/system/containerd.service
        [Unit]
        Description=containerd container runtime
        Documentation=https://containerd.io
        After=network.target

        [Service]
        ExecStartPre=/sbin/modprobe overlay
        ExecStart=/bin/containerd
        Restart=always
        RestartSec=5
        Delegate=yes
        KillMode=process
        OOMScoreAdjust=-999
        LimitNOFILE=1048576
        LimitNPROC=infinity
        LimitCORE=infinity

        [Install]
        WantedBy=multi-user.target
        EOF

    ## Configure the kubelet service. ##
    - name: Creates directory
      become: yes
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /var/lib/kubelet
        - /var/lib/kubernetes
        - /var/run/kubernetes

    - name: Disabel SWAP
      become: yes
      shell: swapoff -a

    - name: Copy certificates for the workers
      become: yes
      copy:
        src: "../01-certificates/worker.{{ inventory_hostname }}.pem"
        dest: "/var/lib/kubelet/{{ inventory_hostname }}.pem"

    - name: Copy certificates for the workers
      become: yes
      copy:
        src: "../01-certificates/worker.{{ inventory_hostname }}-key.pem"
        dest: "/var/lib/kubelet/{{ inventory_hostname }}-key.pem"

    - name: Copy certificate authority for the workers
      become: yes
      copy:
        src: "../01-certificates/ca.pem"
        dest: "/var/lib/kubernetes/ca.pem"

    - name: Copy kube configs for the workers
      become: yes
      copy:
        src: "../02-kube-configs/worker.{{ inventory_hostname }}.kubeconfig"
        dest: "/var/lib/kubelet/kubeconfig"

    - name: Create kubelet config
      become: yes
      shell: |
        cat << EOF | sudo tee /var/lib/kubelet/kubelet-config.yaml
        kind: KubeletConfiguration
        apiVersion: kubelet.config.k8s.io/v1beta1
        authentication:
          anonymous:
            enabled: false
          webhook:
            enabled: true
          x509:
            clientCAFile: "/var/lib/kubernetes/ca.pem"
        authorization:
          mode: Webhook
        clusterDomain: "cluster.local"
        clusterDNS:
          - "10.32.0.10"
        resolvConf: "/run/systemd/resolve/resolv.conf"
        runtimeRequestTimeout: "15m"
        tlsCertFile: "/var/lib/kubelet/{{ inventory_hostname }}.pem"
        tlsPrivateKeyFile: "/var/lib/kubelet/{{ inventory_hostname }}-key.pem"
        EOF

    - name: Create kubelet service
      become: yes
      shell: |
        cat << EOF | sudo tee /etc/systemd/system/kubelet.service
        [Unit]
        Description=Kubernetes Kubelet
        Documentation=https://github.com/kubernetes/kubernetes
        After=containerd.service
        Requires=containerd.service

        [Service]
        ExecStart=/usr/local/bin/kubelet \\
          --config=/var/lib/kubelet/kubelet-config.yaml \\
          --container-runtime=remote \\
          --container-runtime-endpoint=unix:///var/run/containerd/containerd.sock \\
          --image-pull-progress-deadline=2m \\
          --kubeconfig=/var/lib/kubelet/kubeconfig \\
          --network-plugin=cni \\
          --register-node=true \\
          --v=2
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

    ## Configure the kube-proxy service. ##
    - name: Creates directory
      become: yes
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /var/lib/kube-proxy

    - name: Copy kube configs for the workers
      become: yes
      copy:
        src: "../02-kube-configs/kube-proxy.kubeconfig"
        dest: "/var/lib/kube-proxy/kubeconfig"

    - name: Create kube proxy config
      become: yes
      shell: |
        cat << EOF | sudo tee /var/lib/kube-proxy/kube-proxy-config.yaml
        kind: KubeProxyConfiguration
        apiVersion: kubeproxy.config.k8s.io/v1alpha1
        clientConnection:
          kubeconfig: "/var/lib/kube-proxy/kubeconfig"
        mode: "iptables"
        clusterCIDR: "10.200.0.0/16"
        EOF

    - name: Create kube proxy service
      become: yes
      shell: |
        cat << EOF | sudo tee /etc/systemd/system/kube-proxy.service
        [Unit]
        Description=Kubernetes Kube Proxy
        Documentation=https://github.com/kubernetes/kubernetes

        [Service]
        ExecStart=/usr/local/bin/kube-proxy \\
          --config=/var/lib/kube-proxy/kube-proxy-config.yaml
        Restart=on-failure
        RestartSec=5

        [Install]
        WantedBy=multi-user.target
        EOF

    ## Start all of the services. ##
    - name: Enable services
      become: true
      service:
        name: "{{ item }}"
        enabled: true
        daemon_reload: yes
      with_items:
        - containerd 
        - kubelet
        - kube-proxy

    - name: Start/Restart services
      become: true
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - containerd 
        - kubelet
        - kube-proxy

    # - name: Check systemctl status and register the results
    #   shell: |
    #     systemctl status containerd kubelet kube-proxy
    #   register: systemctl

    # - name: Output the registered results of "systemctl status"
    #   debug: var=systemctl.stdout_lines

    # - name: Check systemctl status and register the results
    #   shell: |
    #     kubectl get nodes --kubeconfig /home/cloud_user/admin.kubeconfig
    #   register: systemctl

    # - name: Output the registered results of "systemctl status"
    #   debug: var=systemctl.stdout_lines